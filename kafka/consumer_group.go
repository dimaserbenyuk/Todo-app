package kafka

import (
	"context"
	"time"

	"github.com/IBM/sarama"
	"go.uber.org/zap"
)

type MConsumerGroup struct {
	topic  string
	group  sarama.ConsumerGroup
	logger *zap.Logger
}

// NewConsumerGroup —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π Consumer Group
func NewConsumerGroup(brokers []string, topic, groupID string, logger *zap.Logger) (*MConsumerGroup, error) {
	saramaConfig := sarama.NewConfig()
	saramaConfig.Consumer.Offsets.Initial = sarama.OffsetOldest
	saramaConfig.Consumer.Return.Errors = true
	saramaConfig.Consumer.Group.Rebalance.GroupStrategies = []sarama.BalanceStrategy{sarama.NewBalanceStrategyRange()}

	group, err := sarama.NewConsumerGroup(brokers, groupID, saramaConfig)
	if err != nil {
		logger.Error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Consumer Group", zap.Error(err))
		return nil, err
	}

	logger.Info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ Consumer Group", zap.String("groupID", groupID))

	// –û—Ç–¥–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫ Consumer Group
	go func() {
		for err := range group.Errors() {
			logger.Error("üî• –û—à–∏–±–∫–∞ Consumer Group", zap.Error(err))
		}
	}()

	return &MConsumerGroup{
		topic:  topic,
		group:  group,
		logger: logger,
	}, nil
}

// RegisterHandlerAndConsumeMessages –∑–∞–ø—É—Å–∫–∞–µ—Ç Consumer Group
func (cg *MConsumerGroup) RegisterHandlerAndConsumeMessages(ctx context.Context, handler sarama.ConsumerGroupHandler) {
	defer cg.group.Close()

	for {
		if err := cg.group.Consume(ctx, []string{cg.topic}, handler); err != nil {
			cg.logger.Error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π", zap.Error(err))
			time.Sleep(2 * time.Second) // –†–µ—Ç—Ä–∞–π —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
		}
	}
}

// Close –∑–∞–∫—Ä—ã–≤–∞–µ—Ç Consumer Group
func (cg *MConsumerGroup) Close() error {
	cg.logger.Info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã Consumer Group")
	return cg.group.Close()
}
