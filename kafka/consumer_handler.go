package kafka

import (
	"encoding/json"
	"fmt"

	"github.com/IBM/sarama"
	"go.uber.org/zap"
)

type ConsumerHandler struct {
	Logger *zap.Logger
}

// Setup –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
func (h *ConsumerHandler) Setup(_ sarama.ConsumerGroupSession) error {
	h.Logger.Info("üöÄ Consumer Group –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
	return nil
}

// Cleanup –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
func (h *ConsumerHandler) Cleanup(_ sarama.ConsumerGroupSession) error {
	h.Logger.Info("üõë Consumer Group –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")
	return nil
}

// ConsumeClaim –ø–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Kafka
func (h *ConsumerHandler) ConsumeClaim(sess sarama.ConsumerGroupSession, claim sarama.ConsumerGroupClaim) error {
	fmt.Println("üü¢ Consumer –Ω–∞—á–∞–ª –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π!")

	for msg := range claim.Messages() {
		// –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
		headers := map[string]string{}
		for _, header := range msg.Headers {
			headers[string(header.Key)] = string(header.Value)
		}

		// –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
		h.Logger.Info("üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ",
			zap.String("topic", msg.Topic),
			zap.Int32("partition", msg.Partition),
			zap.Int64("offset", msg.Offset),
			zap.String("key", string(msg.Key)),
			zap.String("value", string(msg.Value)),
			zap.Any("headers", headers),
			zap.Time("timestamp", msg.Timestamp),
		)

		// –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ IP-–∞–¥—Ä–µ—Å (–µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö Kafka)
		if ip, exists := headers["client_ip"]; exists {
			h.Logger.Info("üåç IP-–∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞", zap.String("client_ip", ip))
		}

		// –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ —Å—Ç–∞—Ç—É—Å (–µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –≤ JSON-—Å–æ–æ–±—â–µ–Ω–∏–∏)
		var jsonData map[string]interface{}
		if err := json.Unmarshal(msg.Value, &jsonData); err == nil {
			if status, exists := jsonData["status"]; exists {
				h.Logger.Info("üü¢ –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏", zap.Any("status", status))
			}
		}

		// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
		sess.MarkMessage(msg, "")
	}
	return nil
}
