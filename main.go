package main

import (
	"context"
	"log"
	"time"

	_ "github.com/dmytroserbeniuk/todo-backend/docs"
	"github.com/dmytroserbeniuk/todo-backend/kafka"
	"github.com/dmytroserbeniuk/todo-backend/logger"
	"github.com/gin-contrib/cors"
	"github.com/gin-gonic/gin"
	"github.com/joho/godotenv"
	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"
	"go.uber.org/zap"
)

// @title API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏
// @version 1.0
// @description API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏

// @securityDefinitions.apikey BearerAuth
// @in header
// @name Authorization
// @description –í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ "Bearer {token}"

// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html
// @host localhost:8080
// @BasePath /api/v1/

// @schemes http
func main() {
	// ‚úÖ –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ª–æ–≥–≥–µ—Ä–∞
	var zapLog *zap.Logger

	// –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª
	err := godotenv.Load(".env")
	if err != nil {
		log.Println("‚ö† No .env file found, proceeding without it")
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	initDB()

	// ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ —Å Kafka
	kafkaLogger, err := logger.NewKafkaLogger([]string{"kafka:9092"}, "gin-logs")
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Kafka Logger: %v", err)
	}
	defer kafkaLogger.Close()

	// ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è zap –ª–æ–≥–≥–µ—Ä–∞
	zapLog = logger.NewZapLogger(kafkaLogger)

	// ‚úÖ –ü–µ—Ä–µ–¥–∞–µ–º zapLog –≤ handlers.go
	InitLogger(zapLog)

	// ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ Consumer Group
	consumerGroup, err := kafka.NewConsumerGroup([]string{"kafka:9092"}, "tasks", "todo-consumer-group", zapLog)
	if err != nil {
		zapLog.Fatal("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Consumer Group", zap.Error(err))
	}
	defer consumerGroup.Close()

	// ‚úÖ –ó–∞–ø—É—Å–∫–∞–µ–º Consumer Group –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ
	ctx := context.Background()
	handler := &kafka.ConsumerHandler{Logger: zapLog}
	go func() {
		zapLog.Info("üöÄ –ó–∞–ø—É—Å–∫ Kafka Consumer Group")
		consumerGroup.RegisterHandlerAndConsumeMessages(ctx, handler)
	}()

	// ‚úÖ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
	r := gin.New()
	r.Use(gin.Recovery())

	// ‚úÖ Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–Ω–∏–∫–∏ (—á—Ç–æ–±—ã —Å–µ—Ä–≤–µ—Ä –Ω–µ –ø–∞–¥–∞–ª)
	r.Use(func(c *gin.Context) {
		defer func() {
			if err := recover(); err != nil {
				zapLog.Error("üî• Panic caught",
					zap.Any("error", err),
					zap.String("path", c.Request.URL.Path),
					zap.String("method", c.Request.Method),
					zap.String("client_ip", c.ClientIP()),
				)
				c.JSON(500, gin.H{"error": "Internal Server Error"})
				c.Abort()
			}
		}()
		c.Next()
	})

	// ‚úÖ Middleware –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
	r.Use(func(c *gin.Context) {
		start := time.Now()
		c.Next()
		latency := time.Since(start)

		LogRequest(zapLog,
			c.Request.Method,
			c.Request.URL.Path,
			c.ClientIP(),
			c.Request.UserAgent(),
			c.Writer.Status(),
			latency,
		)
	})

	// –ö–∞—Å—Ç–æ–º–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
	r.Use(cors.New(cors.Config{
		AllowOrigins:     []string{"http://localhost:3000"},
		AllowMethods:     []string{"GET", "POST", "PUT", "DELETE"},
		AllowHeaders:     []string{"Origin", "Content-Type", "Authorization"},
		ExposeHeaders:    []string{"Content-Length", "X-Custom-Header"},
		AllowCredentials: true,
	}))

	// –û—Ç–∫—Ä—ã—Ç—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã (–Ω–µ —Ç—Ä–µ–±—É—é—Ç —Ç–æ–∫–µ–Ω–∞)
	r.POST("/api/v1/register", RegisterHandler)
	r.POST("/api/v1/login", LoginHandler)

	// –ó–∞—â–∏—â—ë–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã (—Ç—Ä–µ–±—É—é—Ç —Ç–æ–∫–µ–Ω)
	auth := r.Group("/api/v1")
	auth.Use(AuthMiddleware())
	{
		auth.GET("/tasks", RoleMiddleware(RoleAdmin, RoleManager), GetTasks)
		auth.POST("/tasks", RoleMiddleware(RoleAdmin, RoleManager), CreateTask)
		auth.PUT("/tasks/:id", RoleMiddleware(RoleAdmin, RoleManager), UpdateTask)

		auth.GET("/user/tasks", RoleMiddleware(RoleUser), GetUserTasks)
		auth.POST("/user/tasks", RoleMiddleware(RoleUser), CreateUserTask)
		auth.PUT("/user/tasks/:id", RoleMiddleware(RoleUser), UpdateUserTask)

		auth.DELETE("/tasks/:id", RoleMiddleware(RoleAdmin), DeleteTask)
		auth.GET("/users", RoleMiddleware(RoleAdmin), GetUsers)
		auth.PUT("/users/role", RoleMiddleware(RoleAdmin), ChangeUserRole)
		auth.DELETE("/users/:id", RoleMiddleware(RoleAdmin), DeleteUser)

		auth.POST("/revoke", RevokeTokenHandler)
		auth.POST("/refresh", RefreshTokenHandler)
		auth.GET("/me", MeHandler)
		auth.POST("/logout", LogoutHandler)

		auth.GET("/profile", ProfileHandler)
		auth.POST("/token/generate_api", GenerateApiTokenHandler)
		auth.GET("/token", GetUserTokenHandler)
	}

	// ‚úÖ Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
	r.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

	// ‚úÖ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –æ—à–∏–±–æ–∫
	if err := r.Run("0.0.0.0:8080"); err != nil {
		zapLog.Fatal("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:", zap.Error(err))
	}
}

// ‚úÖ –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
func LogRequest(log *zap.Logger, method, path, ip, userAgent string, status int, latency time.Duration) {
	log.Info("üåç HTTP-–∑–∞–ø—Ä–æ—Å",
		zap.String("method", method),
		zap.String("path", path),
		zap.String("client_ip", ip),
		zap.String("user_agent", userAgent),
		zap.Int("status", status),
		zap.Duration("latency", latency),
	)
}
