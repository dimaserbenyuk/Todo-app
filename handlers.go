package main

import (
	"context"
	"log"
	"net/http"
	"time"

	"github.com/gin-gonic/gin"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.uber.org/zap"
)

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è zap
var zapLog *zap.Logger

// InitLogger –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç zap.Logger
func InitLogger(logger *zap.Logger) {
	zapLog = logger
}

// GetTasks - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏
func GetTasks(c *gin.Context) {
	role, _ := c.Get("role")

	var filter bson.M
	if role == RoleAdmin || role == RoleManager {
		filter = bson.M{}
	} else {
		username, exists := c.Get("username")
		if !exists {
			c.JSON(http.StatusUnauthorized, gin.H{"error": "Unauthorized"})
			return
		}
		filter = bson.M{"assignee": username}
	}

	cursor, err := TaskCollection.Find(context.TODO(), filter)
	if err != nil {
		zapLog.Error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á", zap.Error(err))
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á"})
		return
	}
	defer cursor.Close(context.TODO())

	var tasks []Task
	if err = cursor.All(context.TODO(), &tasks); err != nil {
		zapLog.Error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á", zap.Error(err))
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á"})
		return
	}

	zapLog.Info("üìã –ü–æ–ª—É—á–µ–Ω—ã –∑–∞–¥–∞—á–∏", zap.Int("count", len(tasks)))
	c.JSON(http.StatusOK, tasks)
}

// CreateTask - —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
func CreateTask(c *gin.Context) {
	// üõ†Ô∏è –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–Ω–∏–∫–∏ (—á—Ç–æ–±—ã —Å–µ—Ä–≤–µ—Ä –Ω–µ –ø–∞–¥–∞–ª)
	defer func() {
		if r := recover(); r != nil {
			zapLog.Error("üî• Panic caught in CreateTask", zap.Any("error", r))
			c.JSON(http.StatusInternalServerError, gin.H{"error": "Internal Server Error"})
		}
	}()

	// üö® –ü—Ä–æ–≤–µ—Ä–∫–∞ zapLog
	if zapLog == nil {
		log.Println("‚ùå zapLog –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"})
		return
	}

	// üö® –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB
	if TaskCollection == nil {
		zapLog.Error("‚ùå MongoDB TaskCollection –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"})
		return
	}

	// üö® –ü—Ä–æ–≤–µ—Ä–∫–∞ username
	username, exists := c.Get("username")
	if !exists {
		zapLog.Error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å username –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")
		c.JSON(http.StatusUnauthorized, gin.H{"error": "Unauthorized"})
		return
	}

	zapLog.Info("üë§ Username –ø–æ–ª—É—á–µ–Ω", zap.String("username", username.(string)))

	// üö® –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞
	var task Task
	if err := c.BindJSON(&task); err != nil {
		zapLog.Warn("–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏", zap.Error(err))
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// üìå –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ID –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
	task.ID = primitive.NewObjectID()
	task.CreatedAt = time.Now()
	task.UpdatedAt = time.Now()
	task.Assignee = username.(string)

	// üìå –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –±–∞–∑—É
	_, err := TaskCollection.InsertOne(context.TODO(), task)
	if err != nil {
		zapLog.Error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏", zap.Error(err))
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"})
		return
	}

	zapLog.Info("‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞", zap.String("title", task.Title), zap.String("assignee", task.Assignee))
	c.JSON(http.StatusCreated, task)
}

// UpdateTask - –æ–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É –ø–æ ID
func UpdateTask(c *gin.Context) {
	username, exists := c.Get("username")
	if !exists {
		c.JSON(http.StatusUnauthorized, gin.H{"error": "Unauthorized"})
		return
	}

	id := c.Param("id")
	objectID, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		zapLog.Warn("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–¥–∞—á–∏", zap.String("id", id))
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID"})
		return
	}

	var task Task
	if err := c.BindJSON(&task); err != nil {
		zapLog.Warn("–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏", zap.Error(err))
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"})
		return
	}

	task.UpdatedAt = time.Now()

	filter := bson.M{"_id": objectID, "assignee": username}
	update := bson.M{"$set": task}

	res, err := TaskCollection.UpdateOne(context.TODO(), filter, update)
	if err != nil || res.MatchedCount == 0 {
		zapLog.Warn("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏", zap.String("id", id))
		c.JSON(http.StatusUnauthorized, gin.H{"error": "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É"})
		return
	}

	zapLog.Info("‚úÖ –ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞", zap.String("id", id))
	c.JSON(http.StatusOK, gin.H{"message": "–ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞"})
}

// DeleteTask - —É–¥–∞–ª—è–µ—Ç –∑–∞–¥–∞—á—É –ø–æ ID
func DeleteTask(c *gin.Context) {
	username, exists := c.Get("username")
	if !exists {
		c.JSON(http.StatusUnauthorized, gin.H{"error": "Unauthorized"})
		return
	}

	id := c.Param("id")
	objectID, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		zapLog.Warn("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–¥–∞—á–∏", zap.String("id", id))
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID"})
		return
	}

	res, err := TaskCollection.DeleteOne(context.TODO(), bson.M{"_id": objectID, "assignee": username})
	if err != nil || res.DeletedCount == 0 {
		zapLog.Warn("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏", zap.String("id", id))
		c.JSON(http.StatusUnauthorized, gin.H{"error": "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É"})
		return
	}

	zapLog.Info("üóëÔ∏è –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞", zap.String("id", id))
	c.JSON(http.StatusOK, gin.H{"message": "–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞"})
}

// RoleMiddleware –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω—É–∂–Ω–∞—è —Ä–æ–ª—å
func RoleMiddleware(allowedRoles ...string) gin.HandlerFunc {
	return func(c *gin.Context) {
		username, exists := c.Get("username")
		if !exists {
			c.AbortWithStatusJSON(http.StatusUnauthorized, gin.H{"error": "Unauthorized"})
			return
		}

		var user User
		err := UserCollection.FindOne(context.TODO(), bson.M{"username": username}).Decode(&user)
		if err != nil {
			c.AbortWithStatusJSON(http.StatusUnauthorized, gin.H{"error": "User not found"})
			return
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Ä–æ–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞
		for _, role := range allowedRoles {
			for _, userRole := range user.Roles {
				if role == userRole {
					c.Next()
					return
				}
			}
		}

		c.AbortWithStatusJSON(http.StatusForbidden, gin.H{"error": "Forbidden"})
	}
}

func ChangeUserRole(c *gin.Context) {
	var req struct {
		Username string   `json:"username" binding:"required"`
		Roles    []string `json:"roles" binding:"required"`
	}

	if err := c.ShouldBindJSON(&req); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
	var user User
	err := UserCollection.FindOne(context.TODO(), bson.M{"username": req.Username}).Decode(&user)
	if err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "User not found"})
		return
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª–∏ –≤ MongoDB
	_, err = UserCollection.UpdateOne(
		context.TODO(),
		bson.M{"username": req.Username},
		bson.M{"$set": bson.M{"roles": req.Roles}},
	)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to update roles"})
		return
	}

	c.JSON(http.StatusOK, gin.H{"message": "Roles updated successfully"})
}

// GetUserTasks - –ø–æ–ª—É—á–∞–µ—Ç –∑–∞–¥–∞—á–∏, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏–µ —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
func GetUserTasks(c *gin.Context) {
	username, exists := c.Get("username")
	if !exists {
		c.JSON(http.StatusUnauthorized, gin.H{"error": "Unauthorized"})
		return
	}

	cursor, err := TaskCollection.Find(context.TODO(), bson.M{"assignee": username})
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"})
		return
	}

	var tasks []Task
	if err = cursor.All(context.TODO(), &tasks); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á"})
		return
	}

	c.JSON(http.StatusOK, tasks)
}

// CreateUserTask - —Å–æ–∑–¥–∞—ë—Ç –∑–∞–¥–∞—á—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func CreateUserTask(c *gin.Context) {
	username, exists := c.Get("username")
	if !exists {
		c.JSON(http.StatusUnauthorized, gin.H{"error": "Unauthorized"})
		return
	}

	var task Task
	if err := c.BindJSON(&task); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	task.ID = primitive.NewObjectID()
	task.Assignee = username.(string) // –ù–∞–∑–Ω–∞—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º
	task.CreatedAt = time.Now()
	task.UpdatedAt = time.Now()

	_, err := TaskCollection.InsertOne(context.TODO(), task)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"})
		return
	}

	c.JSON(http.StatusCreated, task)
}

// UpdateUserTask - –æ–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func UpdateUserTask(c *gin.Context) {
	username, exists := c.Get("username")
	if !exists {
		c.JSON(http.StatusUnauthorized, gin.H{"error": "Unauthorized"})
		return
	}

	id := c.Param("id")
	objectID, _ := primitive.ObjectIDFromHex(id)

	var task Task
	if err := c.BindJSON(&task); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"})
		return
	}
	task.UpdatedAt = time.Now()

	filter := bson.M{"_id": objectID, "assignee": username}
	update := bson.M{"$set": task}

	res, err := TaskCollection.UpdateOne(context.TODO(), filter, update)
	if err != nil || res.MatchedCount == 0 {
		c.JSON(http.StatusUnauthorized, gin.H{"error": "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É"})
		return
	}

	c.JSON(http.StatusOK, gin.H{"message": "–ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞"})
}

func DeleteUser(c *gin.Context) {
	id := c.Param("id")
	objectID, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid user ID"})
		return
	}

	_, err = UserCollection.DeleteOne(context.Background(), bson.M{"_id": objectID})
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to delete user"})
		return
	}

	c.JSON(http.StatusOK, gin.H{"message": "User deleted successfully"})
}

func GetUsers(c *gin.Context) {
	cursor, err := UserCollection.Find(context.Background(), bson.M{})
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Database error"})
		return
	}

	var users []User
	if err = cursor.All(context.Background(), &users); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to parse users"})
		return
	}

	c.JSON(http.StatusOK, users)
}
